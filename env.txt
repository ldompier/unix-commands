=============================
 Commande Linux : env
=============================

ðŸ”¹ Description
--------------
`env` est une commande utilisÃ©e pour afficher ou exÃ©cuter des commandes dans un environnement modifiÃ©.

Elle permet :
- D'afficher les **variables d'environnement**
- De lancer une commande avec des variables dâ€™environnement spÃ©cifiques
- De **nettoyer** lâ€™environnement avec `-i` (exÃ©cuter sans hÃ©ritage de lâ€™environnement courant)

ðŸ”¹ Syntaxe
----------
env [OPTIONS] [NOM=VALEUR]... [COMMANDE [ARG]...]

ðŸ”¹ Exemples dâ€™usage
-------------------
env                         : Affiche toutes les variables dâ€™environnement courantes
env | grep PATH             : Cherche une variable spÃ©cifique
env VAR1=value1 VAR2=val2 cmd : Lance `cmd` avec ces variables temporairement dÃ©finies
env -i cmd                  : Lance `cmd` dans un environnement totalement vide

ðŸ”¹ Cas d'utilisation typiques
-----------------------------
1. Voir toutes les variables d'environnement :
   $ env

2. Lancer un script avec une variable temporaire :
   $ env ENV=dev ./mon_script.sh

3. Nettoyer l'environnement avant d'exÃ©cuter une commande :
   $ env -i bash

4. Modifier temporairement PATH :
   $ env PATH=/custom/bin:$PATH commande

ðŸ”¹ Options courantes
--------------------
-i, --ignore-environment   : Ignore lâ€™environnement courant
-u, --unset=NAME           : Supprime une variable spÃ©cifique de lâ€™environnement
--help                     : Affiche lâ€™aide
--version                  : Affiche la version

ðŸ”¹ Remarques
------------
- `env` est souvent utilisÃ©e dans les **scripts**, par exemple :
  #!/usr/bin/env python3
  Cela permet de trouver `python3` dans le `$PATH`, ce qui rend le script portable.

- `env` ne persiste pas les modifications â€” les variables ne sont valides **que pour la commande appelÃ©e**.